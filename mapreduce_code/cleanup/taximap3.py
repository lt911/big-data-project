#!/usr/bin/python
import sys
from datetime import datetime
import csv

'''
Very first stage clean up.
Input: any collected files for this project, including yellow taxi, green taxi and uber

Output: Turns entries into a key-pair format of : (datetime  pickup_lat, pickup_long, pickup boro, 1)
'''
class Point:
	def __init__(self,x,y):
		self.x = x
		self.y = y

class Polygon:
	'''a class used to create polygon'''
	def __init__(self,points):
		self.points = points
		self.nvert = len(points)

	def contains(self,pt):
		firstX = self.points[0].x
		firstY = self.points[0].y
		testx = pt.x
		testy = pt.y
		c = False
		j = 0
		i = 1
		nvert = self.nvert
		while (i < nvert) :
			vi = self.points[i]
			vj = self.points[j]
			
			if(((vi.y > testy) != (vj.y > testy)) and (testx < (vj.x - vi.x) * (testy - vi.y) / (vj.y - vi.y) + vi.x)):
				c = not(c)

			if(vi.x == firstX and vi.y == firstY):
				i = i + 1
				if (i < nvert):
					vi = self.points[i];
					firstX = vi.x;
					firstY = vi.y;
			j = i
			i = i + 1
		return c

def county_limit():
	'''
	build polygon with with the boundary lat-long, the commented lines are using rectangles
	for estimation.
	'''
	# bk = Polygon([Point(40.551042 , -74.05663),Point(40.739292, -74.05663), 
	# 	Point(40.551042, -73.833365), Point(40.739292, -73.833365)])
	# ny = Polygon([Point(40.679548 , -74.03444), Point(40.882214,-74.034444),
	# 	Point( 40.679548, -73.907104), Point(40.882214, -73.907104)])
	# bx = Polygon([Point(40.785743 , -73.933808), Point(40.917577, -73.933808),
	# 	Point(40.785743 , -73.74806), Point(40.917577, -73.74806)])
	# si = Polygon([Point(40.477399 , -74.25909), Point(40.65176, -74.25909), 
	# 	Point(40.477399 , -74.034547), Point(40.65176, -74.034547)])
	# qn = Polygon([Point(40.489794 , -74.042112), Point(40.812242, -74.042112), 
	# 	Point(40.489794 , -73.700272), Point(40.812242,-73.700272)])
	bk= Polygon([Point(40.653406, -74.054622), Point(40.686827, -74.034444), Point(40.679548, -74.019347),
		Point(40.680597, -74.017207), Point(40.68066, -74.015974), Point(40.681914, -74.015476), Point(40.689047, -74.003946) ,
		Point(40.693147, -74.001546) ,Point(40.693645, -74.000688) ,Point(40.696047, -73.999946) ,Point(40.700156, -73.997641) ,
		Point(40.704194, -73.994588) ,Point(40.704702, -73.993655) ,Point(40.704439, -73.992103) ,Point(40.705158, -73.990748) ,
		Point(40.704747, -73.987546) ,Point(40.705272, -73.980494) ,Point(40.707547, -73.974546) ,Point(40.708947, -73.972146) ,
		Point(40.706847, -73.969445) ,Point(40.709047, -73.969845) ,Point(40.716496, -73.967578) ,Point(40.723876, -73.961543) ,
		Point(40.730064, -73.961572) ,Point(40.733542, -73.962549) ,Point(40.737674, -73.962795) ,Point(40.737091, -73.961188) ,
		Point(40.739292, -73.954732) ,Point(40.739255, -73.952627) ,Point(40.735564, -73.942361) ,Point(40.731918, -73.93992) ,
		Point(40.72992, -73.937339) ,Point(40.727849, -73.929223) ,Point(40.726578, -73.927929) ,Point(40.720056, -73.923865) ,
		Point(40.718764, -73.924036) ,Point(40.71699, -73.923043) ,Point(40.71557, -73.924361) ,Point(40.714074, -73.92392) ,
		Point(40.712928, -73.922116) ,Point(40.710859, -73.921326) ,Point(40.710461, -73.920726) ,Point(40.709471, -73.921676) ,
		Point(40.709004, -73.921473) ,Point(40.703446, -73.912058) ,Point(40.702363, -73.912725) ,Point(40.700998, -73.910578) ,
		Point(40.699905, -73.911655) ,Point(40.695671, -73.904425) ,Point(40.694069, -73.905851) ,Point(40.691438, -73.901241) ,
		Point(40.690731, -73.901804) ,Point(40.687865, -73.900328) ,Point(40.687616, -73.900988) ,Point(40.682447, -73.896497) ,
		Point(40.685139, -73.894033) ,Point(40.683424, -73.892523) ,Point(40.684712, -73.890082) ,Point(40.68418, -73.889575) ,
		Point(40.686002, -73.887625) ,Point(40.687863, -73.883777) ,Point(40.691231, -73.879456) ,Point(40.694191, -73.874021) ,
		Point(40.69515, -73.868917) ,Point(40.681918, -73.866027) ,Point(40.682373, -73.864101) ,Point(40.679073, -73.863282) ,
		Point(40.679165, -73.862346) ,Point(40.671269, -73.860389) ,Point(40.671656, -73.857633) ,Point(40.663802, -73.85566) ,
		Point(40.663237, -73.858359) ,Point(40.659977, -73.857482) ,Point(40.658277, -73.863171) ,Point(40.65518, -73.860964) ,
		Point(40.652671, -73.858386) ,Point(40.649198, -73.856148) ,Point(40.64265, -73.854938) ,Point(40.643521, -73.848338) ,
		Point(40.628461, -73.833365) ,Point(40.607193, -73.834463) ,Point(40.593209, -73.84668) ,Point(40.588669, -73.849852) ,
		Point(40.586592, -73.853522) ,Point(40.574656, -73.879222) ,Point(40.572705, -73.890518) ,Point(40.571619, -73.903871) ,
		Point(40.551042, -74.036293) ,Point(40.57625, -74.034547) ,Point(40.603106, -74.041393) ,Point(40.627287, -74.05663) ,
		Point(40.65176, -74.055739) ,Point(40.653406, -74.054622)]) 
	
	ny = Polygon([Point(40.686827, -74.034444),Point(40.699902, -74.026284),Point(40.727417, -74.021117),
		Point(40.756601, -74.013784),Point(40.780301, -73.997383),Point(40.8108, -73.974882),Point(40.820701, -73.968081),
		Point(40.8269, -73.963182),Point(40.849, -73.953482),Point(40.85955, -73.947765),Point(40.882214, -73.933808),
		Point(40.878974, -73.924503),Point(40.878779, -73.922602),Point(40.878178, -73.921407),Point(40.876577, -73.919808),
		Point(40.875581, -73.9152),Point(40.876578, -73.914905),Point(40.878178, -73.912205),Point(40.879278, -73.911405),
		Point(40.878878, -73.909505),Point(40.878168, -73.909189),Point(40.877478, -73.908005),Point(40.876277, -73.907105),
		Point(40.872978, -73.907104),Point(40.872678, -73.907905),Point(40.871678, -73.908605),Point(40.871676, -73.909105),
		Point(40.869776, -73.909203),Point(40.866528, -73.910851),Point(40.856679, -73.920005),Point(40.850488, -73.923904),
		Point(40.845579, -73.928106),Point(40.842381, -73.929503),Point(40.841664, -73.930157),Point(40.839679, -73.930606),
		Point(40.835679, -73.933006),Point(40.833179, -73.933406),Point(40.828279, -73.933006),Point(40.827779, -73.932506),
		Point(40.825179, -73.932706),Point(40.823571, -73.932303),Point(40.81944, -73.932105),Point(40.81498, -73.932101),
		Point(40.814179, -73.932406),Point(40.813579, -73.932106),Point(40.811556, -73.932503),Point(40.807979, -73.931704),
		Point(40.803865, -73.928199),Point(40.80217, -73.927204),Point(40.802179, -73.922306),Point(40.79908, -73.918606),
		Point(40.79748, -73.915805),Point(40.79618, -73.912506),Point(40.790988, -73.910551),Point(40.78886, -73.913414),
		Point(40.788096, -73.915358),Point(40.784592, -73.918172),Point(40.779434, -73.924605),Point(40.77888, -73.926006),
		Point(40.776762, -73.92797),Point(40.777049, -73.931823),Point(40.778263, -73.931857),Point(40.777576, -73.934114),
		Point(40.779266, -73.935087),Point(40.778439, -73.934972),Point(40.777157, -73.935739),Point(40.774606, -73.938399),
		Point(40.772551, -73.938076),Point(40.771745, -73.93519),Point(40.770548, -73.935741),Point(40.767399, -73.940844),
		Point(40.764434, -73.943951),Point(40.755724, -73.951011),Point(40.751509, -73.95492),Point(40.745731, -73.9583),
		Point(40.743081, -73.961544),Point(40.737674, -73.962795),Point(40.733542, -73.962549),Point(40.730064, -73.961572),
		Point(40.723876, -73.961543),Point(40.716496, -73.967578),Point(40.712999, -73.968469),Point(40.712482, -73.96905),
		Point(40.709047, -73.969845),Point(40.706847, -73.969445),Point(40.706947, -73.970045),Point(40.708947, -73.972146),
		Point(40.707547, -73.974546),Point(40.705272, -73.980494),Point(40.704747, -73.987546),Point(40.705158, -73.990748),
		Point(40.704439, -73.992103),Point(40.704702, -73.993655),Point(40.704194, -73.994588),Point(40.700156, -73.997641),
		Point(40.696047, -73.999946),Point(40.693645, -74.000688),Point(40.693147, -74.001546),Point(40.689047, -74.003946),
		Point(40.681914, -74.015476),Point(40.68066, -74.015974),Point(40.680597, -74.017207),Point(40.679548, -74.019347),
		Point(40.686827, -74.034444)])
	
	bx = Polygon([Point(40.882463, -73.933652),Point(40.888682, -73.929821),Point(40.911012, -73.920967),
		Point(40.914806, -73.919097),Point(40.917477, -73.918405),Point(40.917577, -73.917905),Point(40.911978, -73.899505),
		Point(40.911655, -73.897253),Point(40.907979, -73.88601),Point(40.907134, -73.881825),Point(40.901958, -73.865256),
		Point(40.900479, -73.85931),Point(40.901378, -73.859404),Point(40.901478, -73.859003),Point(40.902178, -73.859604),
		Point(40.902478, -73.859104),Point(40.902077, -73.858302),Point(40.902878, -73.857199),Point(40.904378, -73.857004),
		Point(40.904669, -73.857587),Point(40.905017, -73.857321),Point(40.905168, -73.856118),Point(40.906166, -73.856324),
		Point(40.90606, -73.855687),Point(40.906679, -73.854104),Point(40.907179, -73.853802),Point(40.907681, -73.853804),
		Point(40.908217, -73.854881),Point(40.908974, -73.854342),Point(40.909919, -73.852935),Point(40.909515, -73.852184),
		Point(40.910009, -73.851123),Point(40.907465, -73.853528),Point(40.906458, -73.851057),Point(40.907368, -73.850225),
		Point(40.90531, -73.844847),Point(40.904177, -73.844702),Point(40.903987, -73.841318),Point(40.901567, -73.840729),
		Point(40.89936, -73.839185),Point(40.897511, -73.839718),Point(40.894061, -73.838407),Point(40.88975, -73.824017),
		Point(40.890545, -73.823172),Point(40.891199, -73.823244),Point(40.871721, -73.74806),Point(40.845679, -73.757801),
		Point(40.8264, -73.780193),Point(40.812242, -73.779416),Point(40.804479, -73.781703),Point(40.801879, -73.784002),
		Point(40.799979, -73.787302),Point(40.799881, -73.793403),Point(40.805077, -73.811001),Point(40.80548, -73.817083),
		Point(40.804375, -73.822888),Point(40.803084, -73.827093),Point(40.803162, -73.830548),Point(40.80188, -73.834903),
		Point(40.799992, -73.851809),Point(40.797276, -73.862704),Point(40.790681, -73.870005),Point(40.788694, -73.8711),
		Point(40.786979, -73.870992),Point(40.78616, -73.873688),Point(40.785743, -73.878964),Point(40.787398, -73.889918),
		Point(40.790145, -73.890586),Point(40.79618, -73.912506),Point(40.79748, -73.915805),Point(40.79908, -73.918606),
		Point(40.802179, -73.922306),Point(40.80217, -73.927204),Point(40.803865, -73.928199),Point(40.807979, -73.931704),
		Point(40.811556, -73.932503),Point(40.813579, -73.932106),Point(40.814179, -73.932406),Point(40.81498, -73.932101),
		Point(40.81944, -73.932105),Point(40.825179, -73.932706),Point(40.827779, -73.932506),Point(40.828279, -73.933006),
		Point(40.833179, -73.933406),Point(40.835679, -73.933006),Point(40.839679, -73.930606),Point(40.841664, -73.930157),
		Point(40.842381, -73.929503),Point(40.845579, -73.928106),Point(40.850488, -73.923904),Point(40.856679, -73.920005),
		Point(40.866528, -73.910851),Point(40.869776, -73.909203),Point(40.871676, -73.909105),Point(40.871678, -73.908605),
		Point(40.872678, -73.907905),Point(40.872978, -73.907104),Point(40.873455, -73.907),Point(40.876277, -73.907105),
		Point(40.877478, -73.908005),Point(40.878168, -73.909189),Point(40.878878, -73.909505),Point(40.879278, -73.911405),
		Point(40.878178, -73.912205),Point(40.876578, -73.914905),Point(40.875581, -73.9152),Point(40.876577, -73.919808),
		Point(40.878178, -73.921407),Point(40.878779, -73.922602),Point(40.878974, -73.924503),Point(40.882214, -73.933808),
		Point(40.882463, -73.933652)])

	si = Polygon([Point(40.544922, -74.249274),Point(40.5492, -74.247415),Point(40.558457, -74.231693),
		Point(40.556996, -74.218398),Point(40.560241, -74.215278),Point(40.576563, -74.208968),Point(40.588542, -74.206298),
		Point(40.592691, -74.203688),Point(40.597539, -74.19952),Point(40.600201, -74.199408),Point(40.605961, -74.203813),
		Point(40.614109, -74.203128),Point(40.618557, -74.201864),Point(40.624227, -74.203737),Point(40.628521, -74.202441),
		Point(40.630903, -74.202247),Point(40.643188, -74.18968),Point(40.645995, -74.185636),Point(40.646475, -74.18139),
		Point(40.642149, -74.143255),Point(40.643684, -74.133912),Point(40.644023, -74.125569),Point(40.648011, -74.109976),
		Point(40.648239, -74.093746),Point(40.651596, -74.086806),Point(40.65176, -74.055739),Point(40.627287, -74.05663),
		Point(40.603106, -74.041393),Point(40.57625, -74.034547),Point(40.550905, -74.0363),Point(40.509299, -74.042112),
		Point(40.499601, -74.094483),Point(40.477399, -74.228153),Point(40.487386, -74.253313),Point(40.497207, -74.25909),
		Point(40.50289, -74.259089),Point(40.507905, -74.258291),Point(40.515344, -74.25481),Point(40.520952, -74.246069),
		Point(40.524673, -74.246444),Point(40.533033, -74.248787),Point(40.541851, -74.250609),Point(40.544922, -74.249274)])

	qn = Polygon([Point(40.557283, -73.997087),Point(40.574656, -73.879222),Point(40.588669, -73.849852),
		Point(40.607193, -73.834463),Point(40.628461, -73.833365),Point(40.643521, -73.848338),Point(40.64265, -73.854938),
		Point(40.649198, -73.856148),Point(40.658277, -73.863171),Point(40.659977, -73.857482),Point(40.663237, -73.858359),
		Point(40.663802, -73.85566),Point(40.671656, -73.857633),Point(40.671269, -73.860389),Point(40.679165, -73.862346),
		Point(40.679073, -73.863282),Point(40.682373, -73.864101),Point(40.681918, -73.866027),Point(40.69515, -73.868917),
		Point(40.694191, -73.874021),Point(40.68418, -73.889575),Point(40.684712, -73.890082),Point(40.683424, -73.892523),
		Point(40.685139, -73.894033),Point(40.682447, -73.896497),Point(40.687616, -73.900988),Point(40.687865, -73.900328),
		Point(40.690731, -73.901804),Point(40.691438, -73.901241),Point(40.694069, -73.905851),Point(40.695671, -73.904425),
		Point(40.699905, -73.911655),Point(40.700998, -73.910578),Point(40.702363, -73.912725),Point(40.703446, -73.912058),
		Point(40.709004, -73.921473),Point(40.710461, -73.920726),Point(40.71557, -73.924361),Point(40.71699, -73.923043),
		Point(40.720056, -73.923865),Point(40.727849, -73.929223),Point(40.72992, -73.937339),Point(40.731918, -73.93992),
		Point(40.735564, -73.942361),Point(40.739255, -73.952627),Point(40.737091, -73.961188),Point(40.737674, -73.962795),
		Point(40.743081, -73.961544),Point(40.745731, -73.9583),Point(40.751509, -73.95492),Point(40.764434, -73.943951),
		Point(40.770548, -73.935741),Point(40.771745, -73.93519),Point(40.772551, -73.938076),Point(40.774606, -73.938399),
		Point(40.777157, -73.935739),Point(40.779266, -73.935087),Point(40.777576, -73.934114),Point(40.778263, -73.931857),
		Point(40.777049, -73.931823),Point(40.776762, -73.92797),Point(40.784592, -73.918172),Point(40.788096, -73.915358),
		Point(40.790988, -73.910551),Point(40.79618, -73.912506),Point(40.790145, -73.890586),Point(40.787398, -73.889918),
		Point(40.785743, -73.878964),Point(40.78616, -73.873688),Point(40.786979, -73.870992),Point(40.790681, -73.870005),
		Point(40.797276, -73.862704),Point(40.799992, -73.851809),Point(40.803084, -73.827093),Point(40.80548, -73.817083),
		Point(40.805077, -73.811001),Point(40.799881, -73.793403),Point(40.799979, -73.787302),Point(40.804479, -73.781703),
		Point(40.812242, -73.779416),Point(40.778995, -73.746831),Point(40.778904, -73.745898),Point(40.780382, -73.74676),
		Point(40.75253, -73.701744),Point(40.739242, -73.700272),Point(40.727796, -73.707647),Point(40.725997, -73.718269),
		Point(40.722157, -73.730326),Point(40.710812, -73.726979),Point(40.699713, -73.72537),Point(40.696669, -73.726461),
		Point(40.68025, -73.725687),Point(40.671562, -73.728077),Point(40.666427, -73.728383),Point(40.663855, -73.727577),
		Point(40.663034, -73.728389),Point(40.657731, -73.725927),Point(40.652341, -73.725052),Point(40.647973, -73.741961),
		Point(40.640502, -73.741428),Point(40.640121, -73.742283),Point(40.635511, -73.740115),Point(40.635, -73.74254),
		Point(40.637472, -73.741313),Point(40.637836, -73.743776),Point(40.634128, -73.74529),Point(40.625484, -73.767023),
		Point(40.614515, -73.765742),Point(40.611349, -73.760021),Point(40.609984, -73.755173),Point(40.61231, -73.747993),
		Point(40.611992, -73.745761),Point(40.607499, -73.743355),Point(40.60271, -73.738151),Point(40.594229, -73.73815),
		Point(40.592965, -73.737185),Point(40.592904, -73.744469),Point(40.591503, -73.747749),Point(40.585387, -73.755502),
		Point(40.555364, -73.758256),Point(40.550203, -73.762234),Point(40.533747, -73.768781),Point(40.532387, -73.783969),
		Point(40.522874, -73.826158),Point(40.512, -73.854843),Point(40.502486, -73.870029),Point(40.501127, -73.876778),
		Point(40.489794, -73.886652),Point(40.52554, -73.949912),Point(40.509299, -74.042112),Point(40.551042, -74.036293),
		Point(40.557283, -73.997087)])
	return bk, ny, bx, si, qn


def mapper():
	#dict for yellow, green and uber with latlong
	bk, ny, bx, si, qn = county_limit()
	counties = {'Brooklyn' : bk, 'Manhattan' : ny, 'Bronx': bx, 'Staten Island' : si, 'Queens': qn}
	# dict for uber w/o latlong
	counties2 = {'Staten Island': ['5', '6', '23', '44', '84', '99', '109', '110', '115', '118',
	 '156', '172', '176', '187', '204', '206', '214', '221', '245', '251'],
	 'Unknown': ['264', '265'], 
	 'Brooklyn': ['11', '14', '17', '21', '22', '25', '26', '29', '33', '34', '35', '36', '37', 
	 '39', '40', '49', '52', '54', '55', '61', '62', '63', '65', '66', '67', '71', '72', '76',
	  '77', '80', '85', '89', '91', '97', '106', '108', '111', '112', '123', '133', '149', '150', 
	  '154', '155', '165', '177', '178', '181', '188', '189', '190', '195', '210', '217', '222', '225',
	   '227', '228', '255', '256', '257'], 
	   'Bronx': ['3', '18', '20', '31', '32', '46', '47', '51', '58', '59', '60', '69', '78', '81',
	    '94', '119', '126', '136', '147', '159', '167', '168', '169', '174', '182', '183', '184', '185', 
	    '199', '200', '208', '212', '213', '220', '235', '240', '241', '242', '247', '248', '250', '254', '259'],
	     'EWR': ['1'],
	      'Manhattan': ['4', '12', '13', '24', '41', '42', '43', '45', '48', '50', '68', '74', 
	      '75', '79', '87', '88', '90', '100', '103', '104', '105', '107', '113', '114', '116', '120', '125', 
	      '127', '128', '137', '140', '141', '142', '143', '144', '148', '151', '152', '153', '158', '161', '162',
	       '163', '164', '166', '170', '186', '194', '202', '209', '211', '224', '229', '230', '231', '232', '233', '234',
	        '236', '237', '238', '239', '243', '244', '246', '249', '261', '262', '263'],
	         'Queens': ['2', '7', '8', '9', '10', '15', '16', '19', '27', '28', '30', '38', '53', '56', '57', '64',
	          '70', '73', '82', '83', '86', '92', '93', '95', '96', '98', '101', '102', '117', '121', '122', '124', '129', 
	          '130', '131', '132', '134', '135', '138', '139', '145', '146', '157', '160', '171', '173', '175', '179', '180',
	           '191', '192', '193', '196', '197', '198', '201', '203', '205', '207', '215', '216', '218', '219', '223', '226', '252', '253', '258', '260']}
	for line in sys.stdin:
		line = line.strip().split(',')
		if (len(line) == 18):
		#print yellow taxi 2013 - 2014
			try:
				# date = line[1][:10]
				date = line[1]
				lat = float(line[6])
				lon = float(line[5])
				for k, v in counties.items():
					if v.contains(Point(lat, lon)):
						print '%s\t%s,%s,%s,%d' %(date, lat, lon, k, 1)
			except:
				pass

		elif(len(line) == 19):
			# print yellow taxi 2015-01 -2015-06
			try:
				# date = line[1][:10]
				date = line[1]
				lat = float(line[6])
				lon = float(line[5])
				for k, v in counties.items():
					if v.contains(Point(lat, lon)):
						print '%s\t%s,%s,%s,%d' %(date, lat, lon, k, 1)
			except:
				pass			

		elif (len(line) == 22) and (line[1][0] != 'l'):
		#print green taxi 2014
			try:
				# date = line[1][:10]
				date = line[1]
				lat = float(line[6])
				lon = float(line[5])	
				for k, v in counties.items():
					if v.contains(Point(lat, lon)):
						print '%s\t%s,%s,%s,%d' %(date, lat, lon, k, 1)	
			except:
				pass

		elif (len(line) == 23):
			try:
				# date = line[1][:10]
				date = line[1]
				lat = float(line[6])
				lon = float(line[5])	
				for k, v in counties.items():
					if v.contains(Point(lat, lon)):
						print '%s\t%s,%s,%s,%d' %(date, lat, lon, k, 1)	
			except:
				pass


		elif (len(line) == 4):
			if (line[0][0] == '"') and (line[0][1] != 'D'):
				#print uber apr - sept 2014
				try:
					dt = datetime.strptime(line[0][1:-2], '%m/%d/%Y %H:%M:%S').strftime('%Y-%m-%d %H:%M:%S')
					lat = float(line[1])
					lon = float(line[2])
					for k, v in counties.items():
						if v.contains(Point(lat, lon)):
							print '%s\t%s,%s,%s,%d' %(dt, lat, lon, k, 1)
				except:
					pass

			elif (line[0][0] == 'B') and (line[1][0] !='P'):
				# print uber jan - june 2015
				for k, v in counties2.items():
					if line[3] in v and k in ['Brooklyn', 'Bronx','Queens','Manhattan','Staten Island']:
						print '%s\t%s,%s,%s,%d' %(line[1],'','', k ,1)


if __name__ == '__main__':
	try:
		mapper()
	except:
		raise

